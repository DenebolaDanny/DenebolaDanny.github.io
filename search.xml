<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[BlockChain--拜占庭将军问题深入探讨]]></title>
      <url>http://yoursite.com/2016/11/10/Byzantine-Generals-discuss/</url>
      <content type="html"><![CDATA[<p>了解过比特币和区块链的人，多少都听说过拜占庭将军问题，或听说过比特币（或区块链）的一个重要成就正是解决了拜占庭将军问题。但真正明白这个问题的人并不多，甚至知道这个问题实质的人都很罕见。本文是一篇技术科普，将重点提供了拜占庭将军问题本身对本质及经典算法的解析，并探讨与之相关的一些问题。笔者参考了不少文献，夹杂了大量私货，但并没有提出解决该问题的新算法，这也不是本文的目的。</p>
<h2 id="Part1：拜占庭将军问题是什么"><a href="#Part1：拜占庭将军问题是什么" class="headerlink" title="Part1：拜占庭将军问题是什么"></a>Part1：拜占庭将军问题是什么</h2><p>拜占庭将军问题是一个共识问题: 首先由Leslie Lamport与另外两人在1982年提出，被称为The Byzantine Generals Problem或者Byzantine Failure。核心描述是军中可能有叛徒，却要保证进攻一致，由此引申到计算领域，发展成了一种容错理论。随着比特币的出现和兴起，这个著名问题又重入大众视野。</p>
<h3 id="1-1-拜占庭将军问题场景"><a href="#1-1-拜占庭将军问题场景" class="headerlink" title="1.1  拜占庭将军问题场景"></a>1.1  拜占庭将军问题场景</h3><p>关于拜占庭将军问题，一个简易的非正式描述如下：</p>
<p>拜占庭帝国想要进攻一个强大的敌人，为此派出了10支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御5支常规拜占庭军队的同时袭击。基于一些原因，这10支军队不能集合在一起单点突破，必须在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少6支军队同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们能否找到一种分布式的协议来让他们能够远程协商，从而赢取战斗？这就是著名的拜占庭将军问题。</p>
<p>应该明确的是，拜占庭将军问题中并不去考虑通信兵是否会被截获或无法传达信息等问题，即消息传递的信道绝无问。Lamport已经证明了在消息可能丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。所以，在研究拜占庭将军问题的时候，我们已经假定了信道是没有问题的，并在这个前提下，去做一致性和容错性相关研究。如果需要考虑信道是有问题的，这涉及到了另一个相关问题：两军问题。</p>
<h3 id="1-2-与拜占庭将军相关问题：两军问题"><a href="#1-2-与拜占庭将军相关问题：两军问题" class="headerlink" title="1.2 与拜占庭将军相关问题：两军问题"></a>1.2 与拜占庭将军相关问题：两军问题</h3><p>正如前文所说，拜占庭将军问题和两军问题实质是不一样的。国内大量解释拜占庭将军问题的文章将两者混为一谈，其实是混淆了两个问题的实质，由此造成了许多误解。这两个问题看起来的确有点相似，但是问题的前提和研究方向都截然不同。</p>
<center><img src="http://i.imgur.com/QpayQyx.png" alt=""></center><br><center>图1：两军问题图示</center>

<p>如图1所示，白军驻扎在沟渠里，蓝军则分散在沟渠两边。白军比任何一支蓝军都更为强大，但是蓝军若能同时合力进攻则能够打败白军。他们不能够远程的沟通，只能派遣通信兵穿过沟渠去通知对方蓝军协商进攻时间。是否存在一个能使蓝军必胜的通信协议，这就是两军问题。</p>
<p>看到这里您可能发现两军问题和拜占庭将军问题有一定的相似性，但我们必须注意的是，通信兵得经过敌人的沟渠，在这过程中他可能被捕，也就是说，两军问题中信道是不可靠的，并且其中没有叛徒之说，这就是两军问题和拜占庭将军问题的根本性不同。由此可见，大量混淆了拜占庭将军问题和两军问题的文章并没有充分理解两者。</p>
<p>两军问题的根本问题在于信道的不可靠，反过来说，如果传递消息的信道是可靠的，两军问题可解。然而，并不存在这样一种信道，所以两军问题在经典情境下是不可解的，为什么呢？</p>
<p>倘若1号蓝军（简称1）向2号蓝军（简称2）派出了通信兵，若1要知道2是否收到了自己的信息，1必须要求2给自己传输一个回执，说“你的信息我已经收到了，我同意你提议的明天早上10点9分准时进攻”。</p>
<p>然而，就算2已经送出了这条信息，2也不能确定1就一定会在这个时间进攻，因为2发出的回执1并不一定能够收到。所以，1必须再给2发出一个回执说“我收到了”，但是1也不会知道2是否收到了这样一个回执，所以1还会期待一个2的回执。</p>
<p>虽然看似很可笑，但在这个系统中永远需要存在一个回执，这对于两方来说都并不一定能够达成十足的确信。更要命的是，我们还没有考虑，通信兵的信息还有可能被篡改。由此可见，经典情形下两军问题是不可解的，并不存在一个能使蓝军一定胜利的通信协议。</p>
<p>不幸的是，两军问题作为现代通信系统中必须解决的问题，我们尚不能将之完全解决，这意味着你我传输信息时仍然可能出现丢失、监听或篡改的情况。但我们能不能通过一种相对可靠的方式来解决大部分情形呢？这需要谈到TCP协议。事实上，搜索“两军问题与三次握手”，您一定可以找到大量与TCP协议相关的内容。若您是通信方面的专家，权当笔者是班门弄斧，这里仅用最浅显易懂的方式科普TCP协议的原理和局限，可能存在一些毛刺，请多包涵。</p>
<center><img src="http://i.imgur.com/5Dwlp2e.png" alt=""></center><br><center>图2：TCP协议基本原理</center>

<p>TCP协议中，A先向B发出一个随机数x，B收到x了以后，发给A另一个随机数y以及x+1作为答复，这样A就知道B已经收到了，因为要破解随机数x可能性并不大；然后A再发回y+1给B，这样B就知道A已经收到了。这样，A和B之间就建立一个可靠的连接，彼此相信对方已经收到并确认了信息。</p>
<p>而事实上，A并不会知道B是否收到了y+1；并且，由于信道的不可靠性，x或者y都是可能被截获的，这些问题说明了即使是三次握手，也并不能够彻底解决两军问题，只是在现实成本可控的条件下，我们把TCP协议当作了两军问题的现实可解方法。</p>
<center><img src="http://i.imgur.com/jD70qvm.png" alt=""></center><br><center>图3：量子隐形传态的原理图</center>

<p>那么，是否能够找到一个理论方法来真正的破解两军问题呢？答案是有的，量子通讯协议，笔者并没有能力弄清这个颇为高深的问题。据我的理解，处于量子纠缠态的两个粒子，无论相隔多远都能够彼此同步，光是直观的来看，这个效应可以用来实现保密通讯。</p>
<p>但是由于测不准原理，一测量粒子状态就会改变其状态，所以通讯时还必须通过不可靠信道发送另一条信息。尽管这个“另一条信息”是不可靠的，但是由于已经存在了一条绝对可靠的信道（量子纠缠），保证了另一条信道即使不可靠也能保证消息是可靠的，否则至少被窃取了一定能够被发现。</p>
<p>因此我们可以相信，至少理论上两军问题是可解的，即存在一种方法，即使利用了不可靠的信道，也能保证信息传递的可靠性。所以，在确保了信道可靠的基础上，我们可以回到拜占庭将军问题上继续讨论。</p>
<h2 id="Part2：问题实质及形式化"><a href="#Part2：问题实质及形式化" class="headerlink" title="Part2：问题实质及形式化"></a>Part2：问题实质及形式化</h2><p>我们已经了解了拜占庭将军问题的场景，并且明确了这个问题的解决是建立在通信兵可以正确的传达信息的基础上的，即信道绝对可信。同时，通过前文对于两军问题的探讨，我们明白了理论上可信的信道也是可以实现的。接下来，我们将探讨拜占庭将军问题的实质。</p>
<h3 id="2-1-拜占庭将军问题实质"><a href="#2-1-拜占庭将军问题实质" class="headerlink" title="2.1 拜占庭将军问题实质"></a>2.1 拜占庭将军问题实质</h3><p>回顾问题，一群将军想要实现某一个目标（一致进攻或者一致撤退），但是单独行动行不通，必须合作， 达成共识；由于叛徒的存在，将军们不知道应该如何达到一致。注意，这里“一致性”才是拜占庭将军问题探讨的内容，如果本来叛徒数量就已经多到了问题不可解的地步，这个就是“反叛”的问题了；同时，我们的目标是忠诚的将军能够达成一致，对于这些忠诚的将军来说，进攻或者撤退都是可以的，只要他们能够达成一致就行。</p>
<p>但是，光靠“一致”就可以解决问题吗？考虑一下，如果万事俱备，客观上每个忠诚的将军只要进攻了就一定能够胜利，但是却因为叛徒的存在他们都“一致的”没有进攻；反之，条件不利，将军们不应该进攻，但是却因为叛徒的存在所有人都“一致的”进攻了。</p>
<p>可以发现，只有“一致性”是不足以解决拜占庭将军问题的，我们还需要提出一个“正确性”要求。这个要求是值得斟酌的，因为如果客观来看或许会有“绝对正确的”判断，但是针对每一个将军，大家的判断或许都不相同，我们如何定义“正确”呢？我们或许可以简单地说，正确就是每个忠诚的将军都正确的表达了自己的意思，不会因为叛徒让别的将军认为忠诚的将军是叛徒而不采用他传达的消息。</p>
<p>至此，我们将拜占庭将军问题简化成了，所有忠诚的将军都能够让别的将军接收到自己的真实意图，并最终一致行动；而形式化的要求就是，“一致性”与“正确性”。</p>
<p>如果将问题推广开来，可以发现针对一致性和正确性的算法并不要求命令必须是“进攻/撤退”或是“1/0”，而可以是“发送消息1/发送消息2/待机”或“x/y/z/w”，这意味着拜占庭将军问题算法可以为多种分布式系统提供启发，比如电力系统或网络系统。</p>
<p>由此可见，这个问题说到底是一个关于一致性和正确性的算法问题，这个算法是针对的是忠诚的将军，因为叛徒可以做出任何超出约定的判断。我们就是要在有叛徒的干扰下，找到一个抗干扰的算法。要解决这个算法问题，我们需要将形式化要求具体化。</p>
<h3 id="2-2-形式化条件的推演"><a href="#2-2-形式化条件的推演" class="headerlink" title="2.2 形式化条件的推演"></a>2.2 形式化条件的推演</h3><p>定义一个变量vi（为不失一般性，并不要求vi是布尔值），作为其他将军收到的第i个将军的命令值；i将军会将把自己的判断作为vi。可以想象，由于叛徒的存在，各个将军收到的vi值不一定是相同的。之后，定义一个函数来处理向量(v1,v2,…,vn)，代表了多数人的意见，各将军用这个函数的结果作为自己最终采用的命令。至此，我们可以利用这些定义来形式化这个问题，用以匹配一致性和正确性。</p>
<p>1）一致性</p>
<p><strong>条件1</strong>：每一个忠诚的将军必须得到相同的(v1,v2,…,vn)指令向量或者指令集合。</p>
<p>这意味着，忠诚的将军并不一定使用i将军送来的信息作为vi，i将军也可能是叛徒。但是仅靠这个条件，忠诚的将军的信息送来的信息也可能被修改，这将影响到正确性。</p>
<p>2）正确性</p>
<p><strong>条件2</strong>：若i将军是忠诚的，其他忠诚的将军必须以他送出的值作为vi。</p>
<p>如此，我们得到了一致性和正确性的形式化条件（条件1和条件2），这个条件是充分条件。考虑到正确性条件是针对单个将军，而一致性条件是针对所有将军的，为方便我们重写一致性条件为</p>
<p><strong>条件1′</strong>：无论i将军是忠诚或是叛徒，任何两个忠诚的将军都使用相同的vi。</p>
<p>条件1和条件1′是完全等价的。这是很巧妙的一步转换，如此一致性条件（条件1′）和正确性条件（条件2）都只涉及一个将军i如何帮别的将军接受自己送出的值vi，所以可以将问题改为司令-副官模式来简化问题，即一个司令把自己的命令传递给n-1个副官，使得：</p>
<p><strong>IC1</strong>：所有忠诚的副官遵守一个命令，即一致性。</p>
<p><strong>IC2</strong>：若司令是忠诚的，每一个忠诚的副官遵守他发出的命令，即正确性。</p>
<p>IC1和IC2分别由条件1′和条件2演化得来。司令-副官模式只要将司令遍历各个将军，就可以变成完整问题，而他们采用的算法可以是完全一致的。IC1和IC2构成了解决拜占庭将军问题的充分条件，在这种模式下，司令副官的形式下达成的一致意味着司令的命令得到了有效传达，若出现了异议，有异议的将军会作为司令发起新的司令副官模式寻求自己的观点表达，以协商达成一致。</p>
<p>接下来，我们可以讨论拜占庭将军问题的算法了，这个算法只要能够满足IC1和IC2，就代表这个算法可以切实有效的解决拜占庭将军问题。</p>
<p>在经典的情形下，我们可以找到两种办法，口头协议和书面协议。笔者将会逐一探讨两种算法的推演和证明，其中证明部分并不会采用纯推理，而以介绍证明思路为主。</p>
<p>事实上，若完整进行了算法推演，对算法已经能够有一个大致的了解。口头协议和书面协议会有很多不同的启发，口头协议的实现起来简单，但是算法复杂，同时需要克服的困难更多；书面协议的算法本身很简单，却能够克服很多问题，但是实现算法并不容易。这些不同让两者有了不同的使用场景和具体实现。</p>
<h2 id="Part3：口头协议"><a href="#Part3：口头协议" class="headerlink" title="Part3：口头协议"></a>Part3：口头协议</h2><p>首先，我们明确什么是口头协议。我们将满足以下三个条件的方式称为口头协议：</p>
<p><strong>A1</strong>：每个被发送的消息都能够被正确的投递</p>
<p><strong>A2</strong>：信息接收者知道是谁发送的消息</p>
<p><strong>A3</strong>：能够知道缺少的消息</p>
<p>简而言之，信道绝对可信，且消息来源可知。但要注意的是，口头协议并不会告知消息的上一个来源是谁。</p>
<p>先告知结论：采用口头协议，若叛徒数少于1/3，则拜占庭将军问题可解。也就是说，若叛徒数为m，当将军总数n至少为3m+1时，问题可解（即满足了IC1和IC2）。</p>
<p>这个结论说明了，一个三模冗余的系统只能容故障冻结类型的错误，即一个元件故障以后就卡住不动了（也即已知错误后会出现的结果），那么三模冗余是足够的。</p>
<p>但是对于拜占庭将军问题，由于叛徒可以做出各种各样的判断，就必须四模冗余系统才足够容错。口头协议算法就是把自己的命令告诉其他人，并利用对其他人的命令取多数的方法来得到自己的结论。但要注意的是，别的将军传来的命令是通过算法递归的方法来确定的。利用这个方法，可以保证在叛徒数量少于1/3的情况下，忠诚的将军可以实现一致性和正确性要求，即问题可解。</p>
<p>那么，口头协议算法又是怎么实现叛徒数少于1/3即可容错的呢？下面，笔者将介绍Lamport在其论文中提出的口头协议OM(m)算法。笔者将会逐一介绍口头协议算法的详细内容、实例推演及证明，这一部分将会需要您花一些时间来思考。</p>
<h3 id="3-1-口头协议算法OM-m"><a href="#3-1-口头协议算法OM-m" class="headerlink" title="3.1 口头协议算法OM(m)"></a>3.1 口头协议算法OM(m)</h3><p>OM(0)算法</p>
<ol>
<li><p>司令将他的命令发送给每个副官。</p>
</li>
<li><p>每个副官采用从司令发来的命令；如果没有收到命令，则默认为撤退命令。</p>
</li>
</ol>
<p>OM(m)算法</p>
<ol>
<li><p>司令将他的命令发送给每个副官。</p>
</li>
<li><p>对于每个i，vi是每个副官i从司令收到的命令，如果没有收到命令，则默认为撤退命令。副官i在OM(m-1) 中作为发令者将之发送给另外n-2 个副官。</p>
</li>
<li><p>对于每个i，和每个j ≠ i，vj 是副官i 从第2步中的副官j （使用OM(m-1)算法）发送过来的命令，如果没有收到第2步中副官j 的命令，则默认为撤退命令。最后副官i 使用majority(v1,…,vn-1)得到命令。</p>
</li>
</ol>
<p>其中，majority(v1,…,vn-1)代表了大多数人的命令，若不存在则默认为撤退命令。</p>
<p>要一遍读懂这个算法并不容易，笔者也是花了不少时间研究这一小段文字才弄明白的。不过您不用担心，笔者将会解释几个值得注意的点，并利用一个不难的实例来帮助您理解这个算法。</p>
<ol>
<li><p>算法始终保证了一个更加安全的默认值，这意味着若信息没有传到是可知的，并且传输时间不在考虑范围内。</p>
</li>
<li><p>这个算法是一个递归算法，在OM(m)中需要采用OM(m-1)得到相关结果。m代表的是叛徒数量，从m到0，意味着对于每个将军，需要m+1轮的算法才能完成。</p>
</li>
<li><p>该算法是关于m的，意味着使用该算法必须知道有多少个叛徒。或者说，利用该算法，可以保证叛徒数量在某一个最大值（即总将军数量的1/3）之下时，拜占庭将军问题可解。</p>
</li>
<li><p>对于任意k&lt;m，在第m-k+1步中OM(k)的vi，都是利用OM(k-1)得来的，即每个将军将会在OM(k-1)中询问其他人，i将军传给他们的是什么，而其他人传递回来的信息则是利用OM(k-2)得到。</p>
</li>
</ol>
<p>这个就是递归的意义，若您觉得笔者表达得不甚清楚，不用担心，您只用记住每一步都会牵涉到下面很多步骤就可以了，之后将在实例推演中明白算法的核心思路。</p>
<h3 id="3-2-口头协议实例推演"><a href="#3-2-口头协议实例推演" class="headerlink" title="3.2 口头协议实例推演"></a>3.2 口头协议实例推演</h3><p>首先，笔者将先举一个m=1，n=3的例子来说明三模冗余的问题所在，并介绍m=1，n=4的时候系统是怎么容错的，这样您就可以明白算法是运行的。但由于m=1的时候并没有体现递归的过程（因为m-1就变成了0），笔者将再举一个m=2，n=7的例子来说明算法递推的过程。</p>
<p>（1）m=1，n=3的情形 n=3，意味着一个司令发送命令给两个副官，m=1意味着他们中有一个叛徒。 首先考虑司令忠诚而副官2是叛徒的情况。</p>
<center><img src="http://i.imgur.com/WwwhzVy.png" alt=""></center><br><center>图4：m=1，n=3中司令忠诚而副官2是叛徒的情形</center>

<p>司令把进攻命令传给了两个副官1和副官2，但是由于副官2为了不让他们达成一致，将司令的命令改成了撤退。那对于副官1来说，他应该如何判断？他无法知道是司令是叛徒还是副官2是叛徒，从而无法判断。</p>
<center><img src="http://i.imgur.com/JYoiSxJ.png" alt=""></center><br><center>图5：m=1，n=3中司令是是叛徒的情形</center>

<p>而如果司令是叛徒，两个副官忠诚，司令会发送两个不同的命令。当两个副官对照命令时，他们又凌乱了，无法判断司令是叛徒或者对方是叛徒，从而又无法判断。这个情形非常简易的说明了三模冗余是无法动态容错的。</p>
<p>（2）m=1，n=4的情形 n=4，意味着一个司令发送命令给三个副官，m=1意味着他们中有一个叛徒。 首先考虑司令忠诚而副官3是叛徒的情况。</p>
<center><img src="http://i.imgur.com/9Fxfr9A.png" alt=""></center><br><center>图6：m=1，n=4中司令忠诚而副官3是叛徒的情形</center>

<p>倘若司令在OM(1)中给各副官发送的消息都是进攻（A），之后OM(0)时，叛徒副官3给副官1和副官2说他收到的消息是撤退（R）。那么对于副官1（或副官2）来说，他综合司令、副官3和副官2（或副官1）后得到的消息向量都将会是(A,A,R)，利用majority函数之后，将会采用A，满足了IC1和IC2（回顾IC1：所有忠诚的副官遵守一个命令，IC2：若司令是忠诚的，每一个忠诚的副官遵守他发出的命令）。</p>
<center><img src="http://i.imgur.com/58jVge5.png" alt=""></center><br><center>图7：m=1，n=4中司令是是叛徒的情形</center>

<p>倘若司令是叛徒，那么我们已经不需要满足IC2。为方便，我们假设叛徒司令在OM(1)会给三个副官发送的信息是(x,y,z)，其中x，y，z都可以是A或R的任意一种。之后，三位忠诚的副官将会按照OM(0)要求的那样，交换他们收到的信息。</p>
<p>对于副官1，他综合司令、副官2和副官3后得到的消息向量将会是(x,y,z)，可以发现对于其他两个忠实的副官，他们得到的消息向量也将是(x,y,z)。不管x，y，z如何变化，majority(x,y,z)对于三人来说都是一样的，所以三个副官将会采用一致的行动。</p>
<p>（3）m=2，n=7的情形 接下来，我们将讨论m=2，n=7的情形，虽然只是多了一个叛徒，但是这里会出现递归过程，所以会复杂很多。</p>
<p>首先，我们先讨论司令忠诚的情形，假设叛徒为副官5和副官6。</p>
<center><img src="http://i.imgur.com/mfCZonZ.png" alt=""></center><br><center>图8：m=2，n=7中司令忠诚而副官5和副官6是叛徒的情形</center>

<p>在OM(2)中，司令将攻击命令（A）传给各个副官。在OM(1)中，忠诚的副官们将会发送他们收到的消息（A），但由于副官5和副官6是叛徒，他们将会发送别的信息（比如R）。这时，忠诚的副官们将会采用使用OM(1)中的方法来确定各个v1~v6。例如，对于副官1，他收到了司令传来的命令，他会直接采用majority函数综合司令和其他将军传来的信息吗？他不会，因为这还在OM(1)中，他并不知道司令是不是叛徒，他会利用询问别人的方式来确认将军的命令，但是按照算法他会把司令的命令作为v1（即v1=A）并传给其他人。</p>
<p>接下来他会努力取得其他的v2~v6的值，这时已经在OM(1)中了，副官1绝不会轻易相信别人传来的消息，比如副官2给他传来了命令A，但是他会怀疑副官2传来的消息，所以他用OM(1)大法，问其他人副官2传给了他们什么，副官3和副官4诚实的告诉副官1，副官2给他们传的是A，而这时副官5和副官6又要撒谎了，他们又乱说，我们姑且假定他们传来的是x’和y’吧。这样，终于进入到了OM(0)，这时副官1将会综合其他副官对于v2的反馈，得到向量(A,A,A,x’,y’)，再利用majority函数，得到了v2=A。如下图，这是副官1在OM(1)中得到的信息（x，y等表示了不确定的命令）。</p>
<center><img src="http://i.imgur.com/0i5lqKM.png" alt=""></center><br><center>图9：司令忠诚时副官1在OM(1)中得到的信息</center>

<p>我们就可以得到副官1的v1~v6向量为(A,A,A,A,x,y)，利用majority函数，副官1最终采用的行动会是A。 类似的，我们可以发现，其他几个忠诚的副官得到的命令向量都会是(A,A,A,A,x,y)，利用majority函数后采用的行动都会是A。所以，我们可以发现忠诚的副官采用的命令都是A（满足IC1），并且和忠诚的将军的命令一致（满足IC2）。至此，您应该已经明白了这个算法是怎么递归的，不管m等于多少，都只是一个算法步骤多寡的问题。 至于司令是叛徒的情形，其实是相似的，这里简单的再提一下便于理解。若您已经明白了算法过程，完全可以跳过。</p>
<center><img src="http://i.imgur.com/J8JmSPR.png" alt=""></center><br><center>图10：m=2，n=7中司令和副官6是叛徒的情形</center>

<p>为方便，我们假定了副官6是叛徒。司令在OM(2)中就很鸡贼的给副官1~副官6发送了不同的命令(A,R,A,R,A,x)。在OM(1)中，各副官把自己收到的命令传出去，而（为方便，假定）副官6则给其他副官分别发送了(A,R,A,R,A)。类似于前文推演的那样，考虑副官1，他将司令传来的命令A作为v1后，还会询问其他人传来的命令，由此去确认v2~v6，类似的，我们将之表达为下图：</p>
<center><img src="http://i.imgur.com/jiek6Ly.png" alt=""></center><br><center>图11：司令反叛时副官1在OM(1)中得到的信息</center>

<p>如图，我们就可以得到副官1的v1~v6向量为(A,R,A,R,A,A)，利用majority函数，副官1最终采用的行动会是A。类似的，我们可以发现忠诚的副官1~副官5得到的消息向量都是(A,R,A,R,A,A)，最终他们采用的行动都会是A（满足了IC1），而司令是叛徒不需要满足IC2。值得提醒的是，若副官6传递的是(R,A,R,A,R)，那么他们所有人得到的消息向量都是(A,R,A,R,A,R)，此时A和R数量一样多，这并不代表majority不起作用了，他将采用默认值R（回顾前文：majority(v1,…,vn-1)代表了大多数人的命令，若不存在则默认为撤退命令），所有人的行动都会采用R，这同样是满足的。</p>
<p>到此为止，我们已经将口头算法的实例推演进行的很彻底了，若您还有兴趣，可以试一试当n=7，m=3的时候为什么就不能达成一致了，操作是类似的。 3.3.口头协议算法证明 算法的证明思路其实并不复杂，简单的来说，对于一个递归算法，我们使用数学归纳法来证明是最直观而又有效的方法了。我们回顾一下命题：将军总数为n，叛徒数量为m，OM(m)可以实现，在n&gt;3m的情况下，使得：</p>
<p><strong>IC1</strong>：所有忠诚的副官遵守一个命令。</p>
<p><strong>IC2</strong>：若司令是忠诚的，每一个忠诚的副官遵守他发出的命令。</p>
<p>为了证明整个命题，我们先引入一个针对IC2的引理：</p>
<p>引理：对于任意m和k，如果有超过2k+m 个将军和最多k 个背叛者，那么算法OM(m)满足IC2。</p>
<p>证明：</p>
<ol>
<li><p>m=0，而将军是忠诚的，直接满足IC2；</p>
</li>
<li><p>m&gt;0，此时假定OM(m-1)是有效的，那么只需要考虑OM(m)这一轮即可。</p>
</li>
</ol>
<p>n&gt;2k+m，意味着n-1&gt;2k，n-1是除了司令以外的所有副官，而所有副官的数量比叛徒的两倍还多，那他们直接利用majority函数的时候，就可以直接正确得到司令的命令。<br>可以发现，这个引理说明了如果只需要考虑IC2，将军总数是不需要3倍背叛者之多的，接下来我们回归命题。</p>
<p>证明：</p>
<p>首先考虑司令是忠诚的，令引理中的k=m，直接得到OM(m)可以满足IC2。</p>
<p>这时，我们只用考虑司令是叛徒的状况。同样利用数学归纳法。</p>
<ol>
<li><p>m=1，之前我们已经推演过OM(1)可以满足1个叛徒司令，3个忠诚副官的情况；</p>
</li>
<li><p>m&gt;1，那么假设n’&gt;3m’的情况下，OM(m-1)能够满足IC1和IC2。</p>
</li>
</ol>
<p>由于司令是叛徒，在OM(m)中司令会把命令发给各个副官，而这些副官中会有m-1个叛徒。在下一轮中，副官的数量至少有3m个，叛徒数为m-1，很显然3m&gt;3(m-1)，也就是说n’&gt;3m’，根据假设，OM(m-1)可以满足IC1和IC2，尽管司令是叛徒，由于OM(m-1)是有效的，OM(m)这一轮中忠诚的副官可以得到相同的(v1,…,vn-1)向量，所以忠诚的副官将会利用majority函数采用相同的命令，得证。</p>
<p>总结一下，口头协议中，我们始终要求的是相同的(v1,…,vn-1)向量，只要这个向量是相同的我们怎么处理都可以。又由于算法是递归的，所以我们一定需要把这个处理方法变得通用而逻辑有效才行，所以我们才选用了majority函数这个算法。这一点至关重要却又没有这么直观，因为我们的第一反应是要得到相同的majority函数值。但是反过来一想，既然算法是递归的，majority函数值相同不就意味着(v1,…,vn-1)向量相同吗？正确理解递归的思想是使用该算法和利用数学归纳法证明该算法的关键点。</p>
<p>至此，我们已经大致明确了口头协议是怎么回事，可以做到什么不能做到什么，以及这个算法的推演和证明。很多系统都会出现口头协议的情况，即各个系统节点可以把自己的消息准确的发送出去，同时可以知道消息的来源于何处。但是，这个方法的消息并不能追本溯源，这使得在口头协议中至少得四模冗余，我们可以试图找到一个方法，让消息能够追本溯源，可以想象这能够拓宽使用条件，这个方法可以是书面协议。</p>
<h2 id="Part4：书面协议"><a href="#Part4：书面协议" class="headerlink" title="Part4：书面协议"></a>Part4：书面协议</h2><p>口头协议中我们讨论了很多，揭示了口头协议的缺点是消息不能追本溯源，这使得口头协议必须在四模冗余的情况下才能保证正确。但是，若能引入一种方法让消息能够追本溯源，情况会不会有所改变呢？这就是书面协议引入的灵感。</p>
<p>除了A1，A2和A3以外，我们在口头协议之上添加一个条件A4，使之成为书面协议</p>
<p><strong>A4</strong>：<br>（a）签名不可伪造，一旦被篡改即可发现，而叛徒的签名可被其他叛徒伪造；<br>（b）任何人都可以验证签名的可靠性。</p>
<p>那么，我们先说结论：对于任意m，最多只有m个背叛者情况下，算法SM(m)能解决拜占庭将军问题。也就是说，在使用签名的情况下，书面协议可以打破三模冗余的僵局，使用了签名的情况下，只要知道了叛徒数量，我们就可以利用SM(m)算法解决拜占庭将军问题。</p>
<h3 id="4-1-书面协议算法SM-m"><a href="#4-1-书面协议算法SM-m" class="headerlink" title="4.1 书面协议算法SM(m)"></a>4.1 书面协议算法SM(m)</h3><p>口头协议算法我们已经讨论过很多了，所以笔者对书面协议尽量简短的介绍。回顾</p>
<p><strong>IC1</strong>：所有忠诚的副官遵守一个命令，即一致性。</p>
<p><strong>IC2</strong>：若司令是忠诚的，每一个忠诚的副官遵守他发出的命令，即正确性。</p>
<p>我们要找到一个算法SM(m)，不管将军总数n和叛徒数量m，只要采用该算法，忠诚的将军总能达到一致（满足IC1和IC2）。我们用集合Vi来表示i副官收到的命令集，这是一个集合，也就是满足互异性（没有重复的元素）等集合的条件。类似的，我们定义choice(V)函数来决定各个副官的选择，这个函数可以有非常多种形式，他只要满足了以下两个条件：</p>
<ol>
<li>如果集合V只包含了一个元素v，那么choice(V)=v</li>
<li>choice(o)=RETREAT，其中o是空集</li>
</ol>
<p>任何满足了这两个条件的函数都可以作为choice()，例如取平均值就可以。我们只需要根据具体情形定义choice()即可，这个非重点，笔者并不加以讨论，您可以自行思考。之后我们会发现SM(m)算法并不是一个递归算法，我们只要让各个副官收到的V集相同，choice(V)也一定能够得到相同的值。</p>
<p>简单解释该算法如下：</p>
<p>初始化Vi=空集合。</p>
<p>1.将军签署命令并发给每个副官；<br>2.对于每个副官i：</p>
<p>（A）如果副官i从发令者收到v:0的消息，且还没有收到其他命令序列，那么他</p>
<pre><code>（i）使Vi为{v}；
（ii）发送v:0:i给其他所有副官。
</code></pre><p>（B）如果副官i收到了形如v0:j1:…:jk的消息且v不在集合Vi中，那么他</p>
<pre><code>（i）添加v到Vi；
（ii）如果k&lt;m，那么发送v:0:j1:…:jk:i 给每个不在j1,..,jk 中的副官。
</code></pre><p>3.对于每个副官i，当他不再收到任何消息，则遵守命令choive(Vi)。</p>
<p>值得注意的是，如果司令忠诚，由于其签名不可伪造，所有忠诚的副官都将得到一个单点集{v}，他们采用的命令集Vi相同，得到的choive(Vi)也为v，满足了IC1和IC2。</p>
<p>如果司令并非忠诚，只需要满足IC1，但是算法SM(m)使得所有忠诚的副官得到相同的Vi，使用choice()函数后采用的命令也就一定相同。</p>
<h3 id="4-2-书面协议实例推演"><a href="#4-2-书面协议实例推演" class="headerlink" title="4.2 书面协议实例推演"></a>4.2 书面协议实例推演</h3><p>司令是叛徒的状况稍难想象，举个例子，n=3，m=1，其中司令是叛徒，这是口头协议不能解决的状况。</p>
<center><img src="http://i.imgur.com/3vsNcSj.png" alt=""></center><br><center>图12：m=1，n=3中司令是叛徒的情形</center>

<p>很显然，副官1得到的V1={A,R}，副官2得到相同的V2={A,R}。他们采用choice函数后得到的命令一定相同。</p>
<p>相似的，n=4，m=2，其中司令是叛徒，这同样是口头协议不能解决的状况。</p>
<center><img src="http://i.imgur.com/I7tHFyP.png" alt=""></center><br><center>图13：m=2，n=4中司令和副官3是叛徒的情形</center>

<p>副官1和副官2得到的V1=V2={A,R}，他们采用choice函数后得到的命令也相同。即使命令不是布尔值，经过上面的分析框架，也可以得到相似的结论。至于这个算法的证明，有兴趣的读者可以参考Lamport的原文，笔者就不做过多解释了，如有问题仍可与笔者联系。</p>
<center><img src="http://i.imgur.com/p9DmR2a.png" alt=""></center><br><center>图14：Lamport在论文中对书面协议算法的证明</center>

<p>书面协议的本质就是引入了签名系统，这使得所有消息都可追本溯源。这一优势，大大节省了成本，他化解了口头协议中1/3要求，只要采用了书面协议，忠诚的将军就可以达到一致（实现IC1和IC2）。这个效果是惊人的，相较之下口头协议则明显有一些缺陷。</p>
<p>书面协议的结论非常令人兴奋，这不是解决了拜占庭将军问题了吗？但请注意我们在A1~A4中实际上是添加了一些条件的，这使得拜占庭将军问题在这些假设下能够解决，但是在实际状况中却会有一些问题。观察A1~A4，我们做了一些在现实中比较难以完成的假设，比如没考虑传输信息的延迟时间，书面协议的签名体系难以实现，而且签名消息记录的保存难以摆脱一个中心化机构而独立存在。事实上，存在能够完美解决书面协议实际局限的方法，这个方法就是区块链。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[3 : 软件测试标准]]></title>
      <url>http://yoursite.com/2016/06/19/Software-Testing-Standards/</url>
      <content type="html"><![CDATA[<h2 id="软件的生命周期及开发模型"><a href="#软件的生命周期及开发模型" class="headerlink" title="软件的生命周期及开发模型"></a>软件的生命周期及开发模型</h2><p><img src="http://i.imgur.com/Fskd7S0.jpg" alt=""></p>
<p><strong>开发模型</strong>：</p>
<p>瀑布、螺旋、原型、增量、敏捷、Rational统一过程</p>
<p>##测试模型</p>
<p>V、W、H</p>
<h3 id="V模型"><a href="#V模型" class="headerlink" title="V模型"></a>V模型</h3><p>V模型是软件开发瀑布模型的变种，它反映了测试活动与分析设计的关系。</p>
<p><img src="http://i.imgur.com/DTR8op6.jpg" alt=""></p>
<ul>
<li><p>需求、功能、设计和编码的开发活动随时间而进行，而相应的测试活动（即针对需求、功能、设计和编码的测试）开展的次序正好相反。</p>
</li>
<li><p>成功应用V模型的关键因素是设计测试案例的时机。</p>
</li>
</ul>
<p><strong>局限</strong>：</p>
<p>主要是针对程序进行测试寻找错误，而需求分析阶段隐藏的问题一直到后期的验收测试才被发现。</p>
<h3 id="W模型"><a href="#W模型" class="headerlink" title="W模型"></a>W模型</h3><p><img src="http://i.imgur.com/eb0JYwV.jpg" alt=""></p>
<p>测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、功能和设计同样要测试。只要相应的开发活动完成，就可以开始执行测试（例如，需求分析一完成，我们就可以对需求进行测试，而不是到最后才进行针对需求的验收测试）。测试与开发是同步进行的。</p>
<p><strong>局限</strong>：</p>
<p>W模型和V模型都把软件的开发视为需求、设计、编码等一系列串行的活。同样的，软件开发和测试保持一种线性的前后关系，需要有严格的指令表示上一阶段完全结束，才可正式开始下一阶段。这样就无法支持迭代、自发性以及变更调整。对于当前很多文档需要事后补充，或者根本没有文档的做法下（这已成为一种开发的文化），开发人员和测试人员都面临同样的困惑。</p>
<h3 id="H模型"><a href="#H模型" class="headerlink" title="H模型"></a>H模型</h3><p>H模型将测试活动完全独立出来，形成一个独立的流程，将测试准备活动和测试执行活动清晰地体现出来。</p>
<p><img src="http://i.imgur.com/bMEY1qo.jpg" alt=""></p>
<ul>
<li><p>测试准备活动：需求分析、测试计划、测试分析、测试编码、测试验证</p>
</li>
<li><p>测试执行活动：测试运行、测试报告、测试分析</p>
</li>
</ul>
<h3 id="测试模型的使用"><a href="#测试模型的使用" class="headerlink" title="测试模型的使用"></a>测试模型的使用</h3><p>在实际的工作中，我们要灵活地运用各种模型的优点，在W模型的框架下，运用H模型的思想进行独立地测试，并同时将测试和开发紧密结合，寻找恰当的就绪点开始测试并反复迭代测试，最终保证按期完成预定目标。</p>
<p><strong>α测试</strong>：Alpha测试是由选定的用户进行的产品早期性测试，这个测试一般在可控的环境下进行。<br><strong>β测试</strong>：Beta测试是从用户角度进行的测试，是由软件的多个用户在一个或多个用户的实际使用环境下进行的测试。它是在开发者无法控制的软件环境下进行的软件现场应用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2 : 软件测试实践]]></title>
      <url>http://yoursite.com/2016/06/19/Software-Testing-Practice/</url>
      <content type="html"><![CDATA[<h2 id="测试团队"><a href="#测试团队" class="headerlink" title="测试团队"></a>测试团队</h2><p><strong>三种组织模型</strong>：</p>
<ol>
<li>以开发为核心：</li>
</ol>
<p><img src="http://i.imgur.com/G94tS9M.jpg" alt=""></p>
<ol>
<li>以项目经理为核心：</li>
</ol>
<p><img src="http://i.imgur.com/ykqV47W.jpg" alt=""></p>
<ol>
<li>三国鼎立：</li>
</ol>
<p><img src="http://i.imgur.com/enBQHAg.jpg" alt=""></p>
<p><strong>测试团队规模</strong></p>
<ul>
<li><p>操作系统：测试人员与开发人员为2:1</p>
</li>
<li><p>应用平台、支撑系统：测试人员和开发人员的比例一般在1:1左右</p>
</li>
<li><p>特定应用类产品：测试人员与开发人员的比例一般在1:2~1:4</p>
</li>
</ul>
<hr>
<h2 id="需求分析与测试计划"><a href="#需求分析与测试计划" class="headerlink" title="需求分析与测试计划"></a>需求分析与测试计划</h2><p><strong>软件需求的层次</strong>：</p>
<ul>
<li><p>业务需求反映组织机构或客户对系统、产品的概括性要求，包括所要达到的业务目标，有项目视图与范围文档说明</p>
</li>
<li><p>用户角色需求描述用户使用系统而要完成的各种任务，有用例（use case）文档或方案脚本说明</p>
</li>
<li><p>功能需求定义开发人员必须实现的软件功能，它源于用户需求，是软件需求说明书中重要的组成部分</p>
</li>
</ul>
<h2 id="设计和维护测试用例"><a href="#设计和维护测试用例" class="headerlink" title="设计和维护测试用例"></a>设计和维护测试用例</h2><p><strong>测试用例定义</strong>：</p>
<p>测试用例是可以独立进行测试执行的最小单元</p>
<p><strong>书写标准</strong>：</p>
<p>标识符、测试项、测试环境要求、输入标准、输出标准、测试用例之间的关联</p>
<p><strong>质量要求</strong>：</p>
<p>覆盖率、易用性、易维护性、粒度适中</p>
<h2 id="部署测试环境"><a href="#部署测试环境" class="headerlink" title="部署测试环境"></a>部署测试环境</h2><p><strong>虚拟机的作用</strong></p>
<ul>
<li><p>充分利用硬件资源</p>
</li>
<li><p>节约能源和空间</p>
</li>
<li><p>提升运作效率</p>
</li>
<li><p>有利于环境的建立和维护</p>
</li>
</ul>
<h2 id="报告软件缺陷"><a href="#报告软件缺陷" class="headerlink" title="报告软件缺陷"></a>报告软件缺陷</h2><h3 id="缺陷的生命周期"><a href="#缺陷的生命周期" class="headerlink" title="缺陷的生命周期"></a>缺陷的生命周期</h3><ul>
<li><p>软件缺陷生命周期指的是从一个软件缺陷被发现、报告到这个缺陷被修复、验证直至最后关闭的完整过程。</p>
</li>
<li><p>缺陷生命周期是各类开发人员一起参与、协同测试的过程。</p>
</li>
</ul>
<p><img src="http://i.imgur.com/eymeWux.jpg" alt=""></p>
<h3 id="严重性及优先级"><a href="#严重性及优先级" class="headerlink" title="严重性及优先级"></a>严重性及优先级</h3><p><strong>严重性</strong>：</p>
<p>致命的（fatal）、严重的（critical）、一般的（major）、微小的（minor）</p>
<p><strong>优先级</strong>：</p>
<p><img src="http://i.imgur.com/ulDwZd6.jpg" alt=""></p>
<p><strong>缺陷报告内容</strong></p>
<ul>
<li><p>“步骤”提供了如何重复当前缺陷的准确描述，应简明而完备、清楚而准确。这些信息对开发人员是关键的，视为修复缺陷的向导。</p>
</li>
<li><p>“期望结果”与测试用例标准或设计规格说明书或用户需求等一致，达到软件预期的功能。是验证缺陷的依据。</p>
</li>
<li><p>“实际结果”实际执行测试的结果，不同于期望结果，从而确认缺陷的存在。</p>
</li>
</ul>
<p><strong>缺陷报告要求</strong></p>
<p>单一准确、可以再现、完整统一、短小简练、特定条件、补充完善、不做评价</p>
<h2 id="测试评估"><a href="#测试评估" class="headerlink" title="测试评估"></a>测试评估</h2><p><strong>目的</strong>：</p>
<ul>
<li><p>量化测试进程，判断测试进行的状态和进度</p>
</li>
<li><p>为测试或质量分析报告生成所需的量化数据，如缺陷清除率、测试覆盖率等</p>
</li>
</ul>
<p><strong>种子公式</strong>：</p>
<p><img src="http://i.imgur.com/4VeEXZC.jpg" alt=""></p>
<p>推出程序的总Bug数为 N = S * n /s</p>
<p>其中n是所进行实际测试时发现的Bug总数。如果n= N，说明所有的Bug已找出来，说明做的测试足够充分</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[1 : 软件测试基础]]></title>
      <url>http://yoursite.com/2016/06/19/Software-Testing-Foundation/</url>
      <content type="html"><![CDATA[<h2 id="测试支持度模型-TSM"><a href="#测试支持度模型-TSM" class="headerlink" title="测试支持度模型 TSM"></a>测试支持度模型 TSM</h2><p>TSM有3个级别</p>
<ul>
<li>第一级：弱（weak）。可测性支持，很少测试问题被提及。</li>
<li>第二级：基本（basic）。可测性支持，基本的测试问题被提及。</li>
<li>第三级：强（strong）。可测性支持，所有测试问题被提及。</li>
</ul>
<p>测试成熟度模型（TMM）</p>
<ul>
<li><p>第一级：初始级（Initial）<br>没有定义成熟度目标（Maturity Goal）</p>
</li>
<li><p>第二级：阶段定义级（Phase Definition）<br>目标1：进行测试和调试的目标<br>目标2：开始一个测试计划过程</p>
</li>
<li><p>第三级：集成级（Integration）<br>目标1：建立一个软件测试组织<br>目标2：测试集成进入软件生命周期<br>目标3：控制和监测测试过程</p>
</li>
<li><p>第四级：管理和度量级（Management and Measurement）<br>目标1：建立一个面向组织的评价程序<br>目标2：建立一个技术培训程序<br>目标3：建立一个测试度量程序<br>目标4：软件质量评价</p>
</li>
<li><p>第五级：优化/缺陷预防和质量控制（Optimization/Defect Prevention andQuality Control）<br>目标1：应用缺陷预防数据过程<br>目标2：质量控制</p>
</li>
</ul>
<h2 id="软件测试的定义"><a href="#软件测试的定义" class="headerlink" title="软件测试的定义"></a>软件测试的定义</h2><p>在特定的条件下运行系统或构件，观察或记录结果，对系统的某个方面做出评价。</p>
<p>分析某个软件项以发现现存的和要求的条件之差别（即错误）并评价此软件项的特性。</p>
<h2 id="软件质量定义"><a href="#软件质量定义" class="headerlink" title="软件质量定义"></a>软件质量定义</h2><p>系统、部件或过程满足顾客或用户需求或期望的程度。</p>
<h2 id="软件缺陷"><a href="#软件缺陷" class="headerlink" title="软件缺陷"></a>软件缺陷</h2><p><strong>定义</strong></p>
<ol>
<li><p>软件未达到产品说明书标明的功能</p>
</li>
<li><p>软件出现了产品说明书指明不会出现的错误</p>
</li>
<li><p>软件功能超出产品说明书指明范围</p>
</li>
<li><p>软件未达到产品说明书虽未指出但应达到的目标</p>
</li>
<li><p>软件测试人员认为软件难以理解、不易使用、运行速度慢，或者最终用户认为不好</p>
</li>
</ol>
<p>缺陷时对软件产品预期属性的偏离现象</p>
<p><strong>缺陷产生的原因</strong>：</p>
<p>技术问题：</p>
<ul>
<li>算法错误，语法错误，计算和精度问题，接口参数传递不匹配</li>
<li>没有考虑系统的自我恢复或数据的异地备份、灾难性恢复等问题</li>
</ul>
<p>团队工作：</p>
<ul>
<li>误解、沟通不充分</li>
</ul>
<p>软件本身：</p>
<ul>
<li>文档错误、用户使用场合（user scenario）</li>
<li>时间上不协调、或不一致性所带来的问题</li>
</ul>
<p>规格说明书的缺陷会在需求分析审查、设计、编码、测试等过程中会逐步发现，而不能在需求分析一个阶段发现。</p>
<h2 id="测试的分类"><a href="#测试的分类" class="headerlink" title="测试的分类"></a>测试的分类</h2><ul>
<li>按测试的阶段或层次分类，如单元测试、集成、系统测试等。</li>
<li>按测试目的分类，如功能测试、性能测试、可靠性测试、安全性测试和兼容性测试等。</li>
<li>根据测试过程中被测软件是否被执行，分为静态测试和动态测试。</li>
<li>根据是否针对系统的内部结构和具体实现算法来完成测试，可分为白盒测试和黑盒测试。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[6 : 软件测试自动化]]></title>
      <url>http://yoursite.com/2016/06/19/Software-Test-Automation/</url>
      <content type="html"><![CDATA[<h2 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h2><p>自动化测试（automated test）是相对手工测试而存在的一个概念，由手工逐个地运行测试用例的操作过程被测试工具自动执行的过程所代替。</p>
<p>测试工具的使用是自动化测试的主要特征。</p>
<p>在系统功能逻辑测试、验收测试、适用性测试、涉及物理交互性测试时，多采用黑盒测试的手工测试方法。</p>
<p>单元测试、集成测试、系统负载或性能、稳定性、可靠性测试等比较适合采用TA。</p>
<p>代码分析是一种白盒测试的自动化方法。</p>
<p>捕获和回放是一种黑盒测试的自动化方法</p>
<h2 id="测试工具的分类"><a href="#测试工具的分类" class="headerlink" title="测试工具的分类"></a>测试工具的分类</h2><ul>
<li>根据测试方法不同，分为白盒测试工具和黑盒测试工具、静态测试工具和动态测试工具等。</li>
<li>根据工具的来源不同，分为开源测试工具（多数是免费的）和商业测试工具、自主开发的测试工具和第三方测试工具等。</li>
<li>根据测试的对象和目的，分为单元测试工具、功能测试工具、性能测试工具、测试管理工具等。</li>
</ul>
<h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><p>测试人员要坚持原则，缺陷未修复完坚决不予通过。（X）</p>
<p>实施缺陷跟踪的目的是：软件质量无法控制、问题无法量化、重复问题接连产生、解决问题的知识无法保留 </p>
<pre><code>以下选项中不属于ISO软件质量模型的是        C。 

A）外部质量模型 B）使用质量模型C）维护质量模型 D）内部质量模型 
</code></pre><blockquote>
<p>坚持在软件开发的各个阶段实施下列哪种质量保证措施，才能在开发过程中尽早发现和预防错误，把出现的错误克服在早期  A </p>
<p>A）技术评审         B）程序测试         C）文档审查         D）管理评审</p>
</blockquote>
<pre><code>在软件性能测试中，下列指标中哪个不是软件性能的指标（D）

 A响应时间 B吞吐量 C资源利用率 D并发进程数
</code></pre><blockquote>
<p>下列关于软件可靠性测试的说法中，错误的是（A）</p>
<p> A发现软件缺陷是软件可靠性测试的主要目的 </p>
<p>B软件可靠性测试通常用于有可靠性要求的软件 </p>
<p>C在一次软件可靠性测试中，执行的测试用例必须完全符合所有定义的软件运行剖面</p>
<p> D可靠性测试通常要对测试结果进行分析才能获得测试结论 </p>
</blockquote>
<pre><code>实际的逻辑覆盖测试中，一般以（C  ）为主设计测试用例。 

A. 条件覆盖 B. 判定覆盖 C. 条件组合覆盖 D. 路径覆盖
</code></pre><blockquote>
<p>单元测试主要由（ C ）完成？其中（ A ）起主要作用。 </p>
<p>A． 开发人员 B． 测试人员 C． 开发人员和测试人员 D． 以上都不对</p>
</blockquote>
<pre><code>单元测试是以详细设计说明书为指导

集成测试是以概要设计说明书为指导

确认测试是以需求分析说明书为指导
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[5 : 测试应用技术]]></title>
      <url>http://yoursite.com/2016/06/19/test-design/</url>
      <content type="html"><![CDATA[<h2 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h2><p>兼容性测试验证软件与其所依赖的环境的依赖程度，包括对硬件的依赖程度，对平台软件、其他软件的依赖程度等。</p>
<p>是软件测试中投入较大的一部分。</p>
<p><strong>目的</strong>：确认硬件环境的描述是否正确</p>
<p>对于定制系统来说，兼容性测试应尽早进行，否则系统投入使用后，随着系统中数据的增多，兼容性测试的风险和投入将越来越大。</p>
<h2 id="易用性测试"><a href="#易用性测试" class="headerlink" title="易用性测试"></a>易用性测试</h2><p>易用性是指软件产品被理解、学习、使用和吸引用户的能力。</p>
<p>易用性是一个很广泛的概念，它涉及到易理解性、易学习性、美观性、一致性、业务符合性等方面。</p>
<h2 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h2><ul>
<li>执行时间（Executing Time）是指执行一个程序所用的实际时间和中央处理器所用的时间，或者是程序处于执行过程中的一段时间</li>
<li>日历时间（Calendar Time）指的是编年时间，包括计算机可能未运行的时间</li>
<li>时钟时间（Clock Time）是指从程序执行开始到程序执行完毕所经历的钟表时间</li>
</ul>
<h2 id="负载压力测试"><a href="#负载压力测试" class="headerlink" title="负载压力测试"></a>负载压力测试</h2><p>系统的负载压力是指系统在某种指定软件、硬件以及网络环境下承受的流量，例如并发用户数、持续运行时间、数据量等，其中<strong>并发用户数是负载压力的重要体现。</strong></p>
<p><strong>负载测试</strong>是确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统组成部分的相应输出项，例如通过量、响应时间、CPU负载、内存使用等如何决定系统的性能，如稳定性和响应等。</p>
<p><strong>负载压力测试</strong>是指在一定的约束条件下测试系统所能承受的并发用户数量、运行时间、数据量，以确定系统所能承受的最大负载压力。</p>
<p>负载压力测试包括：</p>
<ul>
<li>并发性能测试（重点）</li>
<li>疲劳强度测试</li>
<li>大数据量测试</li>
</ul>
<h2 id="测试环境、工具、数据准备"><a href="#测试环境、工具、数据准备" class="headerlink" title="测试环境、工具、数据准备"></a>测试环境、工具、数据准备</h2><p>缺陷：</p>
<ul>
<li>缺乏功能点的校验</li>
<li>对有些控件支持得不好</li>
<li>不能达到真实模拟负载</li>
<li>脚本的支持不够灵活</li>
<li>报错定位不够详细</li>
</ul>
<p>盲点：</p>
<ul>
<li>当功能错误发生时，测试工具不能够记录产生的功能性错误，这就忽略了负载压力情况下的功能不稳定问题。</li>
<li>记录所有虚拟用户的操作及服务器的响应是当前负载压力测试技术发展的最大挑战。</li>
<li>导致资源消耗、操作行为增加以及产生大量日志等问题。</li>
</ul>
<h2 id="本地化与国际化"><a href="#本地化与国际化" class="headerlink" title="本地化与国际化"></a>本地化与国际化</h2><p>软件国际化：I18N<br>软件本地化：L10N<br>软件全球化：G11N</p>
<p>I18N是L10N的基础和前提，为L10N做准备</p>
<p>I18N是软件产品源语言开发的一部分，属于Engineering</p>
<p><img src="http://i.imgur.com/y1TLVuZ.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[4 : 测试设计技术]]></title>
      <url>http://yoursite.com/2016/06/16/test-design/</url>
      <content type="html"><![CDATA[<h1 id="测试设计技术"><a href="#测试设计技术" class="headerlink" title="测试设计技术"></a>测试设计技术</h1><p>测试对象不仅仅是源代码，还包括需求分析、需求规格说明书、概要设计、概要设计说明书、详细设计、详细设计说明书、使用手册等各阶段的文档。</p>
<hr>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><ul>
<li><p>测试用例是为了特定目的而设计的测试数据及与之相关的测试规程的一个特定的集合， 称为有效地发现软件缺陷的<strong>最小测试执行单元</strong>。</p>
</li>
<li><p>软件质量的好坏很大程度上取决于测试用例的数量和质量</p>
</li>
</ul>
<blockquote>
<ul>
<li>测试用例是测试人员执行测试的重要参考依据。</li>
<li>良好的测试用例具有复用的功能，在测试过程中可以重复使用。</li>
<li>测试用例是在长期测试实践中积累起来的</li>
<li>测试用例也是检验测试人员进度、工作量以及跟踪/管理测试人员的工作效率的因素</li>
<li>对于单元测试来说，软件规模与测试用例数基<br>本上是成比例的<br>对于集成测试和系统测试，测试用例数与软件<br>规模不是简单的正比关系，软件规模越大，模<br>块间关系越复杂</li>
</ul>
</blockquote>
<h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><p>确定输入和输出参数：边界值分析-&gt;等价类划分-&gt;错误推测-&gt;检查逻辑覆盖</p>
<p>如果程序的功能说明中含有输入条件的组合情况，则一开始就可以选择因果图法。</p>
<p>书写规范：标识符，测试项，测试环境要求，输入，预期输出</p>
<hr>
<h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p><strong>概念：</strong>黑盒测试是在程序接口进行的测试，它只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接收输入数据产生正确的输出信息，并且保持外部信息的完整性。</p>
<p>黑盒测试依赖于测试环境下应用的需求说明或功能描述。</p>
<p>第三方测试大多采用黑盒测试方法。</p>
<p><strong>静态黑盒</strong>测试产品说明书属于静态黑盒测试</p>
<p><strong>动态黑盒</strong>不深入代码细节的软件测试方法称为动态黑盒测试（常被称为行为测试）</p>
<h3 id="黑盒测试用例设计"><a href="#黑盒测试用例设计" class="headerlink" title="黑盒测试用例设计"></a>黑盒测试用例设计</h3><pre><code>等价类划分、边界值分析、错误猜测、判定表、因果图
</code></pre><h4 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h4><p>等价类是输入域的某个子集合，而所有的等价类的并集是整个输入域。在子集合中，各个输入数据对于揭露程序中的错误是等效的。</p>
<pre><code>完备性、无冗余性、等价性
例子在P49
</code></pre><h4 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h4><p>边界值分析是等价划分的扩展，包括等价类+划分的边界值，边界值通常是等价类的界限。</p>
<blockquote>
<p>边界值分析与等价类划分的区别</p>
<ul>
<li>不是在等价类中选择一个元素作为代表，而是在挑选元素时使得等价类（EC）的边界受到测试。</li>
<li>不只关注输入条件，也注意输出条件</li>
</ul>
</blockquote>
<p>对于一个<strong>n变量</strong>的程序，边界值分析测试程序会产生<strong>4n+1</strong>个测试用例。</p>
<pre><code>健壮性测试、最坏情况测试、例子在P77
</code></pre><h4 id="错误猜测法"><a href="#错误猜测法" class="headerlink" title="错误猜测法"></a>错误猜测法</h4><p>错误猜测是基于经验和其他一些测试技术（如边界值测试）的</p>
<p>错误推测法的基本想法是：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据它们选择测试用例。</p>
<h4 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h4><p>P101</p>
<p>列出条件项和动作项，对不同的条件进行选择</p>
<h4 id="因果图法"><a href="#因果图法" class="headerlink" title="因果图法"></a>因果图法</h4><p>因果图是一种挑选高效测试用例以检查组合输入条件的系统方法</p>
<p>等价类划分方法和边界值分析法都是着重考虑输入条件，并没有考虑到输入情况的各种组合，也没考虑到各个输入情况之间的相互制约关系。</p>
<p>基本图形符号<br><img src="http://i.imgur.com/c22vOjT.jpg" alt=""></p>
<p>条件约束符号<br><img src="http://i.imgur.com/R8u4Qtj.jpg" alt=""></p>
<p>例子P129</p>
<hr>
<h2 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h2><p><strong>定义</strong>：白盒测试是知道产品内部工作过程，可通过测试来检测产品内部动作是否按照规格说明书的规定正常进行。</p>
<blockquote>
<p>黑盒测试与白盒测试区别：</p>
<p>黑盒测试：</p>
<ul>
<li>不涉及程序结构</li>
<li>用软件规格说明生成测试用例</li>
<li>某些代码段得不到测试</li>
<li>可适用于从单元测试到系统测试</li>
<li>需要用白盒测试加以补充</li>
</ul>
<p>白盒测试：</p>
<ul>
<li>考查程序逻辑结构</li>
<li>用程序结构信息生成测试用例</li>
<li>通常适用于单元测试和集成测试</li>
</ul>
</blockquote>
<h3 id="白盒测试用例设计"><a href="#白盒测试用例设计" class="headerlink" title="白盒测试用例设计"></a>白盒测试用例设计</h3><pre><code>单元测试、集成测试、系统测试、验收测试
</code></pre><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>单元测试是在模块源程序代码编写完成之后进行的测试。以把单元测试看成是从详细设计开始一直到系统构造完成贯穿于整个时期的一种活动。</p>
<p>定义：</p>
<blockquote>
<p>对结构化程序：单元测试就是对函数或子程序进行的测试<br>对面向对象程序：单元测试是对类或方法的测试</p>
</blockquote>
<p>目的：</p>
<ul>
<li>验证代码是与设计相符合的</li>
<li>跟踪需求和设计的实现</li>
<li>发现设计和需求中存在的缺陷</li>
<li>发现在编码过程中引入的错误</li>
</ul>
<p><strong>调试</strong>：调试的任务是进一步诊断和改正程序中潜在的错误。</p>
<p><img src="http://i.imgur.com/bE3mnD0.jpg" alt=""></p>
<p><strong>单元测试策略</strong></p>
<p><em>自顶向下策略</em>：从最顶层的单元开始，把顶层调用的单元用桩模块代替，对顶层模块做单元测试。对下一层单元进行测试时，使用上面已测试的单元做驱动模块，并为被测模块编写新的桩模块。<br>特点：为系统提供早期的集成途径，测试工作与编码工作同步进行，但是过程可能会越来越复杂</p>
<p><em>自底向上策略</em>：从最底层单元进行测试，使用驱动模块来代替调用它的上层单元。对上一层单元进行测试时，用已经被测试过的模块做桩模块，并为被测单元编写新的驱动模块。<br>特点：不需要单独设计桩模块；无需依赖结构设计，但不能和编码同步进行</p>
<p><em>孤立测试</em>：每个模块都单独测试，简单易操作，高覆盖率，无依赖性。但是无法早期集成，成本较高。</p>
<h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>集成测试的目标是根据实际情况对程序模块采用适当的集成测试策略组装起来，对系统的接口以及集成后的功能进行正确性检验的测试工作。</p>
<pre><code>传统软件集成层次：
模块内集成测试，子系统内集成测试，子系统间集成测试

对于面向对象集成层次：
类内集成测试，类间集成测试
</code></pre><p>集成测试环境因素：硬件环境、操作系统环境、数据库环境、网络环境、测试工具环境、其他环境</p>
<p><strong>集成测试策略</strong>：</p>
<p>一次性集成、自顶向下增量、自底向上增量、混合式增量（三明治）</p>
<p>自顶向下的集成方式可以采用深度优先策略和广度优先策略。</p>
<p>设计桩模块比设计驱动模块成本高。</p>
<h4 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h4><p>系统测试的目标在于通过与系统的需求规格说明进行比较，检查软件是否存在与系统规格不符合或与之矛盾的地方，以验证软件系统的功能和性能等满足规格说明所指定的要求。</p>
<p>测试设计人员应该主要根据需求规格说明来设计系统测试的测试用例。</p>
<h4 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h4><p>以黑盒测试为主，根据需要辅以白盒测试</p>
<h4 id="综合测试"><a href="#综合测试" class="headerlink" title="综合测试"></a>综合测试</h4><p>先静态后动态的组合方式：先进行静态结构分析、代码检查和静态质量度量，再进行覆盖率测试</p>
<p>在不同的测试阶段，测试的侧重点不同：在单元测试阶段，以代码检查、逻辑覆盖为主；在集成测试阶段，需要增加静态结构分析、静态质量度量；在系统测试阶段，应根据黑盒测试的结果，采取相应的白<br>盒测试。</p>
<h3 id="静态结构分析"><a href="#静态结构分析" class="headerlink" title="静态结构分析"></a>静态结构分析</h3><p>在静态结构分析中，测试者通过使用测试工具分析程序源代码的系统结构、数据结构、数据接口、内部控制逻辑等内部结构，生成函数调用关系图、模块控制流图、内部文件调用关系图、子程序表、宏和函数参数表等各类图形图表，可以清晰地标识整个软件系统的组成结构，使其便于阅读与理解，然后可以通过分析这些图表，检查软件有没有存在缺陷或错误。</p>
<h3 id="静态-amp-动态白盒测试"><a href="#静态-amp-动态白盒测试" class="headerlink" title="静态&amp;动态白盒测试"></a>静态&amp;动态白盒测试</h3><blockquote>
<p><strong>代码检查</strong>：</p>
<ul>
<li>确保代码编程标准被有效地执行</li>
<li>提高代码质量，减轻动态测试负担</li>
<li>代码可重复使用，降低项目风险与经费</li>
<li>增加程序的可理解性，降低维护成本</li>
</ul>
<p>方式：桌面检查（自查）、代码审查（审查小组）、走查</p>
</blockquote>
<p>动态白盒测试特点：</p>
<ul>
<li><p>必须生成测试数据来运行被测试程序，取得程序运行的真实情况、动态情况，进而进行分析</p>
</li>
<li><p>测试质量依赖于测试数据</p>
</li>
<li><p>生成测试数据、分析测试结果的工作量大，使开展测试工作费时、费力、费人</p>
</li>
<li><p>动态测试中涉及多方面工作，人员多、设备多、数据多，要求有较好的管理和工作规程</p>
</li>
</ul>
<pre><code>类别：功能确认与接口分析，性能与效率分析，内存分析，代码跟踪，逻辑覆盖率分析
</code></pre><h4 id="逻辑覆盖"><a href="#逻辑覆盖" class="headerlink" title="逻辑覆盖"></a>逻辑覆盖</h4><pre><code>类别：语句覆盖、判定覆盖、条件覆盖、条件-判定覆盖、条件-组合覆盖、路径覆盖
</code></pre><p><strong>解题过程</strong>：</p>
<ol>
<li>画出程序流程图</li>
<li>写出所有的判定、条件、路径，并标号</li>
<li>根据覆盖要求写出测试用例，并分析出条件、路径的覆盖情况</li>
</ol>
<h5 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h5><p>每一条可执行语句至少执行一次</p>
<h5 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h5><p>程序中每个判定至少都获得一次“真”值和“假”值，也称分支覆盖。（忽略了Bool型表达式内部的Bool取值。）</p>
<h5 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h5><p>每个判定中的每个条件的可能值至少满足一次。完全的条件覆盖并不能保证完全的判定覆盖</p>
<h5 id="条件-判定覆盖"><a href="#条件-判定覆盖" class="headerlink" title="条件-判定覆盖"></a>条件-判定覆盖</h5><p>判定中每个条件的所有可能（真/假）至少出现一次，并且每个判定本身的判定结果（真/假）也至少出现一次</p>
<h5 id="条件-组合覆盖"><a href="#条件-组合覆盖" class="headerlink" title="条件-组合覆盖"></a>条件-组合覆盖</h5><p>判定条件中条件的每一种可能组合至少出现一次；判定语句中有N个逻辑条件，每个逻辑条件有两种可能取值，则共有2N种可能组合</p>
<ul>
<li>条件组合覆盖〉判定覆盖〉语句覆盖</li>
<li>条件组合覆盖〉条件覆盖</li>
<li>条件覆盖不一定包含判定覆盖、语句覆盖</li>
<li>判定覆盖不一定包含条件覆盖</li>
<li>路径覆盖〉判定覆盖〉语句覆盖</li>
</ul>
<h5 id="控制流图"><a href="#控制流图" class="headerlink" title="控制流图"></a>控制流图</h5><p><img src="http://i.imgur.com/dqPyDLG.jpg" alt=""></p>
<p>复杂度=区域数目 | 边界数目-节点数目+2 | 判定节点数目+1</p>
<h5 id="基本路径测试"><a href="#基本路径测试" class="headerlink" title="基本路径测试"></a>基本路径测试</h5><p>基本路径测试方法把覆盖的路径数压缩到一定限度内，程序中的循环体最多只执行一次</p>
<blockquote>
<p>步骤</p>
<ul>
<li>以详细设计或源代码作为基础，导出程序的控制流图</li>
<li>计算得到的控制流图G的环路复杂性V（G）</li>
<li>确定线性无关的路径的基本集</li>
<li>生成测试用例，确保基本路径集中每条路径的执行</li>
</ul>
</blockquote>
<h2 id="面向对象测试"><a href="#面向对象测试" class="headerlink" title="面向对象测试"></a>面向对象测试</h2><p>测试步骤：</p>
<ul>
<li>面向对象分析的测试</li>
<li>面向对象设计的测试</li>
<li>面向对象编程的测试</li>
<li>面向对象单元测试</li>
<li>面向对象集成测试</li>
<li>面向对象确认和系统测试</li>
</ul>
<h3 id="基于场景的测试"><a href="#基于场景的测试" class="headerlink" title="基于场景的测试"></a>基于场景的测试</h3><p>基于场景的测试主要关注用户需要做什么，而不是产品能做什么，即从用户任务（使用用例）中找出用户要做什么及如何去执行。</p>
<p>P69</p>
<h3 id="类的随机测试"><a href="#类的随机测试" class="headerlink" title="类的随机测试"></a>类的随机测试</h3><p>如果一个类有多个操作（功能），这些操作（功能）序列有多种排列。而这种不变化的操作序列可随机产生，用这种可能随机排列的序列来检查不同类实例的生存史，就叫随机测试。</p>
<h3 id="类层次的分割测试"><a href="#类层次的分割测试" class="headerlink" title="类层次的分割测试"></a>类层次的分割测试</h3><p>很像传统软件测试中的等价类划分测试。</p>
<ul>
<li>基于状态的分割</li>
<li>基于属性的分割</li>
<li>基于类型的分割</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fade away游戏试玩视频]]></title>
      <url>http://yoursite.com/2016/05/19/Fade%20away%20test/</url>
      <content type="html"><![CDATA[<h2 id="Fade-Away"><a href="#Fade-Away" class="headerlink" title="Fade Away"></a>Fade Away</h2><p>此游戏是BIT《游戏设计概论》课程的实践项目，基于UNITY 3D开发，项目历时不足两月。</p>
<p>水平有限，还请多多批评O(∩_∩)O</p>
<pre><code>评论模块还在施工中/(ㄒoㄒ)/~~可以在微博中call我
</code></pre><hr>
<iframe height="480" width="800" src="http://cache.tv.qq.com/qqplayerout.swf?vid=c03084s0idi" frameborder="0" allowfullscreen><br></iframe>]]></content>
    </entry>
    
  
  
</search>
